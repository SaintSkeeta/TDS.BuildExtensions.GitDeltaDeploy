<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="GetTdsNuGetPackageFolder" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <PackagesFolderPath ParameterType="System.String" Required="true" />
      <TdsNuGetFolder ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        var hhogTDSNuGetNamePattern = "HedgehogDevelopment.TDS.*" ;
        var hhogTDSPackageFolders = Directory.EnumerateDirectories(PackagesFolderPath, hhogTDSNuGetNamePattern);
        foreach(var folder in hhogTDSPackageFolders)
        {
            var tasksDllFolder = folder + "/build";
            var tasksFileExists = File.Exists(tasksDllFolder + "/HedgehogDevelopment.SitecoreProject.Tasks.dll");
            if (tasksFileExists)
            {
                TdsNuGetFolder = tasksDllFolder;
                return true;
            }
        }
        TdsNuGetFolder = "";
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <!-- From https://gist.github.com/thoemmi/3483648 -->
  <UsingTask TaskName="ExistsInPath" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <FileName ParameterType="System.String" Required="true" />
      <Exists ParameterType="System.Boolean" Output="true" />
    </ParameterGroup>
    <Task>
      <!--<Reference Include="" />-->
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        var values = Environment.GetEnvironmentVariable("PATH");
        foreach (var path in values.Split(';')) {
            var fullPath = Path.Combine(path, FileName);
            if (File.Exists(fullPath)) {
                Exists = true;
                return true;
            }
        }
        Exists = false;
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="CountLinesInFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <FileName Required="true" />
      <Lines ParameterType="System.Int64" Output="true"/>
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
				Lines = File.ReadLines(FileName).Count();
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <UsingTask AssemblyFile="Hedgehog.TDS.BuildExtensions.GitDeltaDeploy.dll" TaskName="Hedgehog.TDS.BuildExtensions.GitDeltaDeploy.Tasks.Filters.CullFilesFromProject"/>
  <Target Name="BeforeSitecoreBuild" Condition="'$(CustomGitDeltaDeploy)' == 'True'">
    <PropertyGroup Condition="'$(CustomGitDeltaDeploy)' == 'True'">
      <DeltaFolder Condition="'$(OutDir)' != '$(OutputPath)' and '$(OutDir)' != ''">$(OutDir)Delta</DeltaFolder>
      <DeltaFolder Condition="'$(OutDir)' == '$(OutputPath)' or '$(OutDir)' == ''">$(MSBuildProjectDirectory)\bin\Delta</DeltaFolder>

    </PropertyGroup>
    <Message Condition="'$(CustomGitDeltaDeploy)' == 'True'"
            Importance="normal" Text="Setting the Delta Logging Directory: $(DeltaFolder)." />

    <GetTdsNuGetPackageFolder PackagesFolderPath="$(SolutionDir)/packages/">
      <Output TaskParameter="TdsNuGetFolder" PropertyName="TdsNuGetPackageDllFolder" />
    </GetTdsNuGetPackageFolder>

    <PropertyGroup>
      <NuGetUsed Condition="$(TdsNuGetPackageDllFolder) == ''">False</NuGetUsed>
      <NuGetUsed Condition="$(TdsNuGetPackageDllFolder) != ''">True</NuGetUsed>
    </PropertyGroup>

    <Message Condition="$(NuGetUsed) == 'False'"
             Text="Solution doesn't use the HedgehogDevelopment.TDS NuGet package. You need to manually copy the 'packages/build/Hedgehog.TDS.BuildExtensions.GitDeltaDeploy.dll' to your MSBuild directory (C:\Program Files (x86)\MSBuild\HedgehogDevelopment\SitecoreProject\v9.0).'" />
    <Message Condition="$(NuGetUsed) == 'True'"
             Text="Solution uses the HedgehogDevelopment.TDS NuGet package. Hedgehog.TDS.BuildExtensions.GitDeltaDeploy.DLL will load from there." />

    <PropertyGroup Condition="$(NuGetUsed) == 'True'">
      <GitDeltaNuGet Condition="Exists('$(TdsNuGetPackageDllFolder)/HedgehogDevelopment.SitecoreProject.Tasks.dll') and Exists('$(TdsNuGetPackageDllFolder)/Hedgehog.TDS.BuildExtensions.GitDeltaDeploy.dll')">True</GitDeltaNuGet>
      <GitDeltaNuGet Condition="Exists('$(TdsNuGetPackageDllFolder)/HedgehogDevelopment.SitecoreProject.Tasks.dll') and !Exists('$(TdsNuGetPackageDllFolder)/Hedgehog.TDS.BuildExtensions.GitDeltaDeploy.dll')">False</GitDeltaNuGet>
    </PropertyGroup>

    <Message Condition="$(NuGetUsed) == 'True' and $(GitDeltaNuGet) == 'True'" Text="MSBuild Project File Dir: $(MSBuildThisFileDirectory)" />
    <Message Condition="$(NuGetUsed) == 'True' and $(GitDeltaNuGet) == 'True'" Text="TDS NuGet Dir: $(TdsNuGetPackageDllFolder)" />

    <!-- GitDeltaDll does not exist in NuGet folder -->
    <Message Condition="$(NuGetUsed) == 'True' and $(GitDeltaNuGet) == 'False'" Text="GitDeltaDeploy.DLL does not exists in NuGet folder, copying..." />

    <Copy Condition="$(NuGetUsed) == 'True' and $(GitDeltaNuGet) == 'False'"
          SourceFiles="$(MSBuildThisFileDirectory)/Hedgehog.TDS.BuildExtensions.GitDeltaDeploy.dll"
          DestinationFolder="$(TdsNuGetPackageDllFolder)/" />

    <!-- GitDeltaDll already exists in NuGet folder -->
    <Message Condition="$(NuGetUsed) == 'True' and $(GitDeltaNuGet) == 'True'" Text="GitDeltaDeploy.DLL exists in NuGet folder" />

    <!-- If the DLL looks old, copy it over again. -->
    <PropertyGroup Condition="$(NuGetUsed) == 'True' and $(GitDeltaNuGet) == 'True'">
      <NuGetDllDate>$([System.IO.File]::GetLastWriteTime('$(TdsNuGetPackageDllFolder)/Hedgehog.TDS.BuildExtensions.GitDeltaDeploy.dll'))</NuGetDllDate>
      <ProjectDllDate>$([System.IO.File]::GetLastWriteTime('$(MSBuildThisFileDirectory)/Hedgehog.TDS.BuildExtensions.GitDeltaDeploy.dll'))</ProjectDllDate>
    </PropertyGroup>

    <Copy Condition="$(NuGetUsed) == 'True' and ($(NuGetDllDate) != $(ProjectDllDate))"
          SourceFiles="$(MSBuildThisFileDirectory)/Hedgehog.TDS.BuildExtensions.GitDeltaDeploy.dll"
          DestinationFolder="$(TdsNuGetPackageDllFolder)/" />

  </Target>
  <Target Name="GitDiff" Condition="'$(CustomGitDeltaDeploy)' == 'True'">
    <Message Importance="" Text="Discovering changed items files since the last local deployment of this project." />
    <!-- Check that Git exists in the local PATH variable on the machine -->
    <ExistsInPath FileName="git.exe">
      <Output TaskParameter="Exists" PropertyName="GitExists" />
    </ExistsInPath>
    <Message  Condition="!$(GitExists)"
              Importance="High" Text="Warn: Git.exe not found in PATH. We cannot determine cullable items from calls to git.exe." />

    <!-- If not supplied to the build already, retrieve the git commit ID of the last successful deployment of this project (from the LastDeploymentGitCommitId.txt file) and store it in the LastDeploymentGitCommitID property. -->
    <ReadLinesFromFile Condition="$(LastDeploymentGitCommitID) == '' and Exists('$(DeltaFolder)/LastDeploymentGitCommitId.txt')"
                       File="$(DeltaFolder)/LastDeploymentGitCommitId.txt" >
      <Output TaskParameter="Lines" PropertyName="LastDeploymentGitCommitID" />
    </ReadLinesFromFile>
    <Message Condition="'$(LastDeploymentGitCommitID)' != ''"
             Importance="normal"
             Text="Last Deployment Git Commit ID is : $(LastDeploymentGitCommitID)" />
    <Message Condition="'$(LastDeploymentGitCommitID)' == '' and '$(LastDeploymentGitTagName)' == ''"
             Importance="normal"
             Text="Neither Last Deployment Git Commit ID or Last Deployment Git Tag Name exist. The entire TDS project will be deployed without using the custom git delta deploy feature." />
    <Message Condition="'$(LastDeploymentGitTagName)' != ''"
             Importance="normal"
             Text="Last Deployment Git Tag Name is : $(LastDeploymentGitTagName)" />

    <!-- Retrieve the git commit ID of the current git repo and store it in the GitCurrentCommitID property. -->
    <Exec Condition="$(GitExists) and ('$(LastDeploymentGitCommitID)' != '' or '$(LastDeploymentGitTagName)' != '')"
          Command="git rev-parse HEAD" Outputs="$(GitCurrentCommitID)" WorkingDirectory="$(SolutionDir)" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitCurrentCommitID" />
    </Exec>

    <CallTarget Condition="$(GitExists) and '$(CustomGitDeltaDeploy)' == 'True'" Targets="OutputLastCommitId"/>

    <Message Condition="'$(GitCurrentCommitID)' != ''"
             Importance="normal" Text="Current Git Commit is: $(GitCurrentCommitID)" />

    <MakeDir Condition="!Exists('$(DeltaFolder)')"
         Directories="$(DeltaFolder)" />

    <PropertyGroup>
      <PrevIdentifier Condition="'$(LastDeploymentGitTagName)' != ''">$(LastDeploymentGitTagName)</PrevIdentifier>
      <PrevIdentifier Condition="'$(LastDeploymentGitTagName)' == '' and '$(LastDeploymentGitCommitID)' != ''">$(LastDeploymentGitCommitID)</PrevIdentifier>
    </PropertyGroup>

    <!-- Discover the .item files that have changed in between the current commit that this repo is at and the last deployment of this project -->
    <Exec Condition="$(GitExists) and '$(PrevIdentifier)' != '' and '$(GitCurrentCommitID)' != ''"
          Command="git diff -r --name-only --no-commit-id $(PrevIdentifier)..$(GitCurrentCommitID) &quot;*.item&quot; &gt; &quot;$(DeltaFolder)/ChangedItemFiles.txt&quot;" Outputs="$(DeltaFolder)/ChangedItemFiles.txt" WorkingDirectory="$(SolutionDir)" />
  </Target>

  <!-- Cull down the deployable items by checking if they exist in the ChangedItemFiles.txt file. -->
  <Target Name="GetCullItemsFromProjectParameters">
    <CallTarget Targets="GitDiff"/>
    <PropertyGroup Condition="'$(CustomGitDeltaDeploy)' == 'True'">
      <CullItemsFromProjectClass>Hedgehog.TDS.BuildExtensions.GitDeltaDeploy.Tasks.Filters.CullItemsFromProjectByExistanceInChangedItemsFile, Hedgehog.TDS.BuildExtensions.GitDeltaDeploy</CullItemsFromProjectClass>
      <CullItemsFromProjectParameters>$(DeltaFolder)\ChangedItemFiles.txt</CullItemsFromProjectParameters>
    </PropertyGroup>
    <!-- Duplicate of the original Delta Deploy option, allowing for fallback to this if required. -->
    <PropertyGroup Condition="'$(CustomGitDeltaDeploy)' != 'True' and '$(IncludeItemsChangedAfter)' != ''">
      <CullItemsFromProjectClass>HedgehogDevelopment.SitecoreProject.Tasks.Filters.CullItemsFromProjectByUpdateDate, HedgehogDevelopment.SitecoreProject.Tasks</CullItemsFromProjectClass>
      <CullItemsFromProjectParameters>$(IncludeItemsChangedAfter)</CullItemsFromProjectParameters>
    </PropertyGroup>
  </Target>

  <!-- Update the LastDeploymentGitCommitId.txt with the commit ID that the current repo is at -->
  <Target Name="AfterSitecoreMerge" Condition="'$(CustomGitDeltaDeploy)' == 'True'">
    <Message Importance="normal" Text="Setting the LastDeploymentGitCommitId.txt value to the latest git commit ID." />

    <Exec Condition="$(GitExists)"
          Command="git rev-parse HEAD &gt; &quot;$(DeltaFolder)/LastDeploymentGitCommitId.txt&quot;" Outputs="$(DeltaFolder)/LastDeploymentGitCommitId.txt" WorkingDirectory="$(SolutionDir)"  />
  </Target>

  <Target Name="AfterSitecoreBuild" Condition="'$(CullProjectFiles)' == 'True'" DependsOnTargets="GitDiff">
    <!-- list all files -->
    <Message Importance="normal" Text="git ls-files --full-name &gt; &quot;$(DeltaFolder)/AllFiles.$(MSBuildProjectName).txt&quot;" />
    <Exec Command="git ls-files --full-name &gt; &quot;$(DeltaFolder)/AllFiles.$(MSBuildProjectName).txt&quot;" Outputs="$(DeltaFolder)/AllFiles.$(MSBuildProjectName).txt" WorkingDirectory="$(SolutionDir)" />

    <!-- list changed files -->
    <Message Importance="normal" Text="git diff --name-only $(PrevIdentifier)..$(GitCurrentCommitID) &gt; &quot;$(DeltaFolder)/DiffFiles.$(MSBuildProjectName).txt&quot;" />
    <Exec Command="git diff --name-only $(PrevIdentifier)..$(GitCurrentCommitID) &gt; &quot;$(DeltaFolder)/DiffFiles.$(MSBuildProjectName).txt&quot;" Outputs="$(DeltaFolder)/DiffFiles.$(MSBuildProjectName).txt" WorkingDirectory="$(SolutionDir)" />

    <!-- aggregate into single file listing only unchanged files -->
    <CountLinesInFile FileName="$(DeltaFolder)/DiffFiles.$(MSBuildProjectName).txt">
      <Output TaskParameter="Lines" PropertyName="ChangedItemsLength" />
    </CountLinesInFile>

    <Message Condition="$(ChangedItemsLength) == 0" Importance="normal" Text="No changed items found in: $(DeltaFolder)\DiffFiles.$(MSBuildProjectName).txt" />

    <Message Condition="$(ChangedItemsLength) > 0" Importance="normal" Text="findstr /vig:&quot;$(DeltaFolder)\DiffFiles.$(MSBuildProjectName).txt&quot; &quot;$(DeltaFolder)\AllFiles.$(MSBuildProjectName).txt&quot; &gt; &quot;$(DeltaFolder)\Unchanged.$(MSBuildProjectName).txt&quot;" />
    <Exec Condition="$(ChangedItemsLength) > 0" Command="findstr /vig:&quot;$(DeltaFolder)\DiffFiles.$(MSBuildProjectName).txt&quot; &quot;$(DeltaFolder)\AllFiles.$(MSBuildProjectName).txt&quot; &gt; &quot;$(DeltaFolder)\Unchanged.$(MSBuildProjectName).txt&quot;" Outputs="$(DeltaFolder)\Unchanged.$(MSBuildProjectName).txt" WorkingDirectory="$(SolutionDir)" />

    <CullFilesFromProject Condition="$(ChangedItemsLength) > 0" OutputPath="$(_OutputPath)" UnchangedFiles="$(DeltaFolder)/Unchanged.$(MSBuildProjectName).txt" />
  </Target>

  <Target Name="OutputLastCommitId" Condition="'$(CustomGitDeltaDeploy)' == 'True'">
    <MakeDir Condition="!Exists('$(DeltaFolder)')"
         Directories="$(DeltaFolder)" />

    <Exec Command="git rev-parse HEAD &gt; &quot;$(DeltaFolder)\LastDeploymentGitCommitId.txt&quot;" Outputs="$(DeltaFolder)\LastDeploymentGitCommitId.txt" WorkingDirectory="$(SolutionDir)"  />
  </Target>
</Project>